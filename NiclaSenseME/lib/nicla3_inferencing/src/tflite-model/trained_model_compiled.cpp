/* Generated by Edge Impulse
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
// Generated on: 16.03.2023 10:44:14

#include <stdio.h>
#include <stdlib.h>
#include "edge-impulse-sdk/tensorflow/lite/c/builtin_op_data.h"
#include "edge-impulse-sdk/tensorflow/lite/c/common.h"
#include "edge-impulse-sdk/tensorflow/lite/micro/micro_mutable_op_resolver.h"
#include "edge-impulse-sdk/porting/ei_classifier_porting.h"

#if EI_CLASSIFIER_PRINT_STATE
#if defined(__cplusplus) && EI_C_LINKAGE == 1
extern "C" {
    extern void ei_printf(const char *format, ...);
}
#else
extern void ei_printf(const char *format, ...);
#endif
#endif

#if defined __GNUC__
#define ALIGN(X) __attribute__((aligned(X)))
#elif defined _MSC_VER
#define ALIGN(X) __declspec(align(X))
#elif defined __TASKING__
#define ALIGN(X) __align(X)
#endif

#ifndef EI_MAX_SCRATCH_BUFFER_COUNT
#define EI_MAX_SCRATCH_BUFFER_COUNT 4
#endif // EI_MAX_SCRATCH_BUFFER_COUNT

#ifndef EI_MAX_OVERFLOW_BUFFER_COUNT
#define EI_MAX_OVERFLOW_BUFFER_COUNT 10
#endif // EI_MAX_OVERFLOW_BUFFER_COUNT

using namespace tflite;
using namespace tflite::ops;
using namespace tflite::ops::micro;

namespace {

constexpr int kTensorArenaSize = 352;

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX)
#pragma Bss(".tensor_arena")
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#pragma Bss()
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16) __attribute__((section(".tensor_arena")));
#else
#define EI_CLASSIFIER_ALLOCATION_HEAP 1
uint8_t* tensor_arena = NULL;
#endif

static uint8_t* tensor_boundary;
static uint8_t* current_location;

template <int SZ, class T> struct TfArray {
  int sz; T elem[SZ];
};
enum used_operators_e {
  OP_FULLY_CONNECTED, OP_SOFTMAX,  OP_LAST
};
struct TensorInfo_t { // subset of TfLiteTensor used for initialization from constant memory
  TfLiteAllocationType allocation_type;
  TfLiteType type;
  void* data;
  TfLiteIntArray* dims;
  size_t bytes;
  TfLiteQuantization quantization;
};
struct NodeInfo_t { // subset of TfLiteNode used for initialization from constant memory
  struct TfLiteIntArray* inputs;
  struct TfLiteIntArray* outputs;
  void* builtin_data;
  used_operators_e used_op_index;
};

TfLiteContext ctx{};
TfLiteTensor tflTensors[11];
TfLiteEvalTensor tflEvalTensors[11];
TfLiteRegistration registrations[OP_LAST];
TfLiteNode tflNodes[4];

const TfArray<2, int> tensor_dimension0 = { 2, { 1,102 } };
const TfArray<1, float> quant0_scale = { 1, { 0.14802739024162292, } };
const TfArray<1, int> quant0_zero = { 1, { 48 } };
const TfLiteAffineQuantization quant0 = { (TfLiteFloatArray*)&quant0_scale, (TfLiteIntArray*)&quant0_zero, 0 };
const ALIGN(16) int8_t tensor_data1[40*102] = { 
  -66, -83, -34, -89, -85, 84, -59, 18, 79, 64, 95, 94, -48, -114, -42, -72, 35, 31, -41, 3, 74, 58, -69, -22, -34, 22, -77, 11, 13, -18, 23, -79, -45, 50, -13, 82, 1, -48, 59, -7, 52, 10, 3, -66, -20, 89, -8, -4, 28, -19, -111, 73, -34, 33, 23, -3, -65, -25, 49, -33, 86, 32, 76, 92, 73, 101, -18, 45, -45, 24, 79, -80, 43, -19, 13, 72, 8, 104, 20, -41, -20, -82, -50, 58, -59, -32, -55, 89, 25, 42, 68, 68, -13, -77, -54, 90, -61, -37, -39, 24, -28, 72, 
  12, -5, 17, 67, -76, 51, -24, -60, -40, 74, 4, -77, 34, 18, -50, 88, -90, -82, -30, 61, -46, 35, -81, 35, -17, 53, -87, 97, -94, -15, 84, -64, -32, 33, 48, -99, -31, 46, -82, 55, 66, -83, -51, -90, -44, 77, -92, -100, 1, -109, -18, -65, -57, -77, -33, -58, 43, 80, -81, -84, 46, 6, 35, -94, 63, 4, -74, -38, 47, -34, 45, -10, -73, -110, 29, 33, -52, -35, -78, 27, 3, 38, -50, 69, 38, 86, 70, -65, -65, -76, -17, -74, -30, 8, 46, 68, -81, -100, -73, 75, -36, -96, 
  -22, -67, -6, -97, -80, -41, -94, 64, -76, 76, 64, -50, -62, 22, -19, -62, -77, -70, 9, -41, 87, 1, -4, 76, 92, 96, 33, 73, 85, 38, 30, -91, 62, -48, 66, 74, -46, -33, -58, -74, 20, -78, 72, -8, -62, -28, -111, 97, 53, 52, -70, 64, 38, -76, -34, 9, 17, 79, 53, -85, 83, 73, -91, -40, -83, 53, -13, 64, -40, 19, 2, 21, 71, -84, -46, 87, -45, -56, 12, -88, 17, 93, 67, -66, 11, -31, 90, -66, -85, 9, -2, 102, -84, -71, 73, 7, 20, 59, -35, -107, 77, 101, 
  -114, -80, 25, -59, 36, 16, 4, 6, -25, 91, -84, 116, -24, 1, 79, -4, 13, -19, 13, -82, 4, -47, -81, 68, 43, 87, -47, -117, 45, 40, -110, -21, -66, -51, -111, 18, -19, 14, -96, -73, 48, -90, 33, 85, 78, -23, -45, 26, -95, 66, -25, -90, 15, -34, 23, 54, -37, 15, -13, 3, 23, 113, -24, -64, -99, -59, 63, -62, 79, -84, 25, 16, -67, 66, 86, 66, 21, 106, -26, -37, -13, -77, 80, 36, 65, -67, -98, 98, -60, 108, 71, -53, -72, 98, 7, 28, 29, -37, 49, -16, -53, 110, 
  -7, -43, 25, -92, 3, 20, -18, -64, -60, 25, 6, -45, -21, 106, 82, 8, -54, -54, 46, -51, 33, -59, -89, 85, 46, 63, 14, 74, 72, 54, -75, -16, 101, 20, -3, -27, -13, 35, 41, 0, -9, 71, 63, -5, -65, -62, 39, 105, -65, 111, -49, -51, -48, -72, -36, 55, -56, -44, 40, -85, -68, -68, 75, 91, -14, -50, 1, 66, -79, 89, 22, 17, -40, -17, 79, -63, 15, 53, -28, -7, -28, -25, -27, 65, 36, 111, 30, 35, 87, 7, 6, 115, -80, 29, 73, -53, -34, -33, 12, -36, -26, 40, 
  61, -24, -3, 23, 3, -46, 102, 71, -55, 63, -53, -21, -59, 18, 50, 43, -4, -35, -3, 104, -11, 92, -45, -102, -10, -8, -44, -17, 17, 59, -15, 93, 9, 56, 16, -102, -44, -37, 10, 31, -89, 28, 107, -24, -88, 32, -82, -69, 53, -66, -13, 14, 81, 1, -26, 7, 58, 35, 24, 64, -56, 20, 17, 42, -40, -35, -40, 78, -34, -13, -21, -71, 80, -26, -30, -9, -84, -89, 23, -32, 13, 16, -23, 3, -87, 31, 86, 89, 66, -106, 9, -17, 28, -34, 22, -40, -57, 111, 59, 94, -83, 37, 
  -72, 1, -26, 21, -48, -91, -101, 105, -9, 29, 9, 83, 20, -29, 31, 47, -83, -45, 13, 34, 77, -75, -29, 71, 48, 54, 69, -85, -59, 18, 36, 32, -35, 32, -40, -77, -20, -20, 31, 80, 58, -18, 49, -26, 95, -40, 14, -73, 67, 106, 40, 68, -4, 62, -75, 99, 62, -47, -77, 30, 67, 16, -59, 93, -18, -47, -24, 76, -54, 19, 62, -93, 80, -3, 100, -23, -6, 13, -28, -74, -89, -36, 97, -107, -79, -52, -61, 100, -99, -77, 83, 114, -71, -10, -45, -70, -81, 76, -11, 53, -28, 58, 
  -30, -62, -93, 11, 82, 51, -70, -51, -5, 11, -28, -105, -14, 74, 37, -84, -93, 10, -99, 52, 10, 72, -70, 52, 23, 98, -50, 48, 1, -16, -12, 33, -92, 34, 65, -76, -29, 39, 16, 80, 72, 6, -54, 71, -80, -84, -103, -62, -97, -63, -101, -82, -9, -1, 61, 84, 60, -4, 5, -44, 25, -97, -82, -39, -35, -9, -83, 93, 66, 85, -65, -67, 31, -41, 40, -97, 11, -48, 22, -71, 37, -4, -91, 36, -19, 35, 46, 60, 82, -66, -58, 35, 10, -35, 50, -19, 40, 92, 36, 65, -17, 75, 
  26, 38, 65, -33, 42, -93, 4, -102, 19, 69, -14, -12, -45, -83, 81, -38, -43, 71, -18, -78, 51, -73, -34, 74, -73, -92, 21, -31, -93, 50, -21, -46, 86, -100, 3, 26, 40, -64, 44, 82, -44, 57, 45, 50, 43, 75, -95, -4, -27, 100, 84, 37, -69, 11, -6, 3, -74, 82, 48, 56, -41, 83, 68, -63, 55, -42, -36, 40, 65, 35, 28, -7, 42, 67, -43, 73, 0, -42, -74, -3, -24, 14, -6, -32, -69, -45, -77, -8, -75, 24, 72, 59, 75, -15, 93, -43, -24, 50, -18, 102, 70, 36, 
  1, -8, -98, -14, 32, -5, -44, -6, 11, 73, 52, -17, 82, -44, 75, -94, -6, -24, -4, -13, -79, 40, 38, 61, -23, -37, -62, 64, -65, 46, -48, 85, 91, 83, 81, 4, -42, 26, 71, 30, 8, -45, -88, -43, 34, -92, 52, -63, 17, -62, 16, 12, -27, -94, -71, -85, 20, -63, 66, -72, 40, -63, 22, 33, -14, 65, 93, -83, -70, 85, 29, -83, -33, -41, -7, 56, 10, -70, -70, 6, 60, 8, -71, 91, -15, -98, 8, 16, 89, 18, -80, -70, 13, 84, -46, -41, -46, 31, -27, -13, -92, -69, 
  -65, -104, 107, 32, 7, 0, 34, -20, -54, -28, -61, 64, -30, -81, 41, 103, -95, 98, -22, -75, -34, 86, 39, 35, -26, 79, -72, 65, 23, -78, -40, 45, -61, 87, -93, -24, -40, 16, -68, 64, 73, -42, -54, 39, 58, 82, 32, 31, 101, 66, -47, 15, -103, 107, 108, -19, -56, -71, -82, 69, 57, 74, 50, -34, -42, -42, -21, 38, -5, 38, 49, -27, -6, -30, -72, 38, -67, -36, -56, -93, 57, -10, 76, -45, 38, 45, -45, 42, 62, 48, 50, -72, -32, 30, 72, 87, -75, 72, 35, -15, 12, 74, 
  81, -21, 2, 28, 72, -29, 9, -81, 5, 78, 44, -7, 66, -39, -74, -88, -73, 70, 76, 62, -52, -103, -80, -94, -8, -45, 73, 103, 86, -88, -26, 51, 4, 67, 42, -63, 4, -44, -66, -56, -72, 49, 26, 63, -44, -4, 29, -85, -6, -34, -96, 71, 34, -66, 64, -7, -90, 42, -53, -83, 59, 44, 79, -4, -71, 98, 52, 12, -28, 47, 69, 73, -33, -42, 15, 35, -84, 8, 26, 3, -89, 83, 85, -51, 66, -38, 6, 64, -93, -60, 22, -96, 53, 13, -23, 17, 89, -103, 0, 81, -47, -32, 
  42, -4, 77, 33, -4, -2, -69, 71, 50, -94, -91, 87, -81, -93, 78, 62, -34, -96, -51, -96, -24, 8, -12, 47, -15, -47, -33, 67, 61, 44, -75, 22, -27, 75, 74, -112, 28, -92, 0, -71, -2, 74, -59, -72, -17, 58, -94, -3, -98, -86, 66, -38, -53, 16, 48, -63, 13, -19, 9, 63, -36, -15, -32, 45, -75, -23, -30, 89, 62, 49, 10, 98, 47, -88, 83, 92, -10, 48, 79, -31, 48, 91, -59, 97, 31, -48, 71, 16, -93, 82, -16, 12, -29, 74, 90, -54, 90, 64, -11, -35, 78, 78, 
  -9, -32, -7, 67, 37, 93, 32, -2, -78, 25, -82, 47, -108, 47, 75, -95, 52, 76, 89, 44, -31, 63, -44, -51, -2, -78, -6, 57, 23, -96, -6, 88, -4, 31, -112, 65, -10, 89, 27, -37, 6, 41, 48, 62, -84, -30, -81, 44, 48, 69, -91, -32, -1, 45, -112, 89, 50, 32, -50, -77, -88, -55, -101, -13, 56, -45, 73, -33, -59, 21, 106, -10, 26, -93, 87, 44, -62, -19, 40, 36, 34, -66, -80, -57, 3, 54, 21, 110, 102, 31, 45, 52, 2, 76, 36, -86, 72, -25, -27, 64, -19, 94, 
  -61, 114, 34, 50, 1, -87, -81, 24, -68, -45, 29, -60, 63, -54, -50, 22, 94, 76, 34, -50, -1, 78, -19, 65, 83, -56, 68, -5, -22, 76, -85, -7, -82, 72, -65, 73, 92, -20, 93, -17, 42, -41, -31, -14, -68, 35, 47, 57, -98, 12, -57, -107, -92, -51, 80, -86, 20, -49, 28, -38, -29, -19, -9, -103, -74, -70, -13, 54, -60, 70, 43, -25, 26, -18, 69, 98, -95, -1, -74, -76, 95, -40, 100, -96, 43, -56, -27, 10, -75, -21, 104, 28, 24, 43, -64, -78, -25, 74, 20, 49, 36, 35, 
  -51, -48, -26, -60, -1, -52, -26, 81, -6, 56, 37, 25, -30, 44, 16, -99, -77, 55, -12, -19, 93, 75, -39, -113, -24, -24, 28, 21, -20, -35, 70, -85, -11, -51, -108, 66, 34, -48, -50, -72, 8, 55, -22, -53, 46, -84, 0, 47, -85, -13, -55, 24, 23, -38, 45, 84, -106, 78, -37, 90, 48, 58, 9, 11, -56, -34, -30, -29, 20, 79, -67, -91, -18, -41, 109, -76, 98, -61, 93, 35, -90, -85, -1, 59, -80, 75, 6, -12, 52, 50, 53, 19, 14, 42, -126, 13, 106, 67, -55, 36, -77, 49, 
  -80, 88, -6, -23, -16, -10, -65, -36, 65, -95, -60, -61, 52, 9, 92, -1, -27, 11, -21, -49, 18, -62, 35, 41, 87, 116, -23, -28, -71, 5, -52, 3, -26, -20, 23, -31, 59, 51, 80, 62, 63, 52, 30, 29, 38, -85, 100, -43, 83, 127, 102, -82, 49, -78, 38, 94, -55, 42, -82, 30, 28, -2, 46, -29, -63, 99, -46, 125, -86, -23, 14, -70, 85, -5, 8, 54, -66, -106, -29, 20, 62, 93, -26, -19, 18, 54, 14, 57, -11, -24, -67, 69, -29, -53, 25, -70, -62, 69, -25, -79, 80, 31, 
  -34, -82, 87, 16, -64, 4, 32, 0, 0, -53, -94, 58, 100, -56, 56, 63, 22, -86, 105, -72, -79, -80, 105, 74, 25, -36, -43, 99, -4, 42, 90, 72, 91, -35, -7, 76, -85, 52, -80, 57, 71, -46, 83, 96, -43, -2, -87, 91, 73, 67, 33, 88, -1, -30, -16, 84, 80, 53, 12, 96, -3, 56, -44, -61, -7, -51, 110, 105, -60, 96, 96, 82, 47, 59, -19, 29, 46, -43, 14, -30, 35, 37, 77, -67, -27, 25, -91, 74, 30, -78, -7, 62, -53, 29, 76, -71, -40, -16, -50, -86, -5, 80, 
  -59, 64, 72, 7, -28, -86, 86, -62, -28, -88, 60, -31, -54, 58, 28, 47, 81, 42, 53, 4, -28, 13, 93, -82, 61, -8, -69, 22, 14, -106, 19, 81, 76, -85, -73, 23, 2, 72, -57, 51, -73, -56, -90, -15, -44, -58, 30, 8, 25, -36, -55, -31, -47, -69, 46, -41, 101, 34, 87, 35, 42, -87, 116, -78, -84, 86, -29, -88, -44, -48, 43, 84, 109, 13, -89, 41, 5, -54, -79, -86, 87, -89, -48, 44, 3, 45, 67, -53, 93, 81, -50, 25, -81, 77, -34, 0, -76, 16, -53, 67, -8, -86, 
  -16, 61, 23, 17, 96, -6, 6, 73, 26, 29, -30, 101, 78, -10, -92, -101, 102, 39, 91, 42, -80, 81, -56, -10, -34, 76, -32, -44, 82, 9, 37, 18, -58, 93, 8, 66, 21, -98, 51, -30, -4, -31, -75, -16, -94, -33, 44, 47, 42, 95, -23, 63, 68, 0, 19, -71, 99, 18, -47, 55, -7, 58, 53, -70, 96, -109, -15, 56, -43, -48, -74, 77, 48, -30, -98, 72, -91, -79, -71, 85, -105, 97, -75, -41, 71, -50, 55, 17, -4, -73, 23, -16, -29, -75, -33, -70, -10, -67, 67, -88, 18, -42, 
  -69, 8, 10, -73, 21, -48, 88, 99, -31, -64, -95, -76, -62, 40, -36, -87, 78, -42, 63, -11, 95, 54, 19, 46, 9, 80, 74, 18, -29, 2, -35, -26, -33, 49, -82, -58, 0, 95, 68, 59, 48, 71, 20, 33, 65, -76, 59, -28, 36, 95, -55, -48, -71, -72, 30, -19, -11, 8, 24, -19, 50, 88, -92, -56, -72, -102, -53, -35, 101, 63, -45, 44, 94, -73, 47, 44, 34, 68, 16, 83, -50, 67, -104, -90, 92, -19, 60, -75, 32, 90, -72, -76, -90, 67, 30, 94, 83, 62, 39, -52, -79, 64, 
  30, -48, 92, 75, 65, -46, -77, -51, -83, 48, -46, -51, -48, 37, 10, 92, -7, 91, 65, -57, 24, 4, -84, -2, -45, 90, -42, -11, 103, -73, 18, 51, -44, -71, -25, 50, -45, 0, -82, -99, -61, -102, -4, 68, -88, -11, -81, 77, 93, -107, 82, 68, 77, 14, -36, -2, -24, -82, -100, 9, 4, -72, -87, 78, -48, -71, 1, 53, 77, 34, 36, 28, -1, 11, 46, -48, 84, -6, 4, -71, -85, 34, 6, -76, 106, -100, -31, 11, 32, -50, 80, 46, 62, -83, -107, 69, 93, -40, 10, 78, -53, -24, 
  -84, 31, 25, -19, 14, -13, -6, -97, -25, -94, -13, 27, 100, -61, -62, 76, 42, 31, 2, -73, -19, -8, 10, -33, -62, -12, -70, 49, 24, 61, -80, 28, -74, 4, 86, 30, 113, 52, -24, -28, -53, 20, 114, 45, 47, 19, -36, 24, 3, -26, 24, -31, 76, 77, -56, 28, -37, -2, -68, -87, 95, 75, -40, -94, -21, -19, 54, -20, -38, 53, -44, -27, -73, -40, 19, -103, -30, -23, -85, 18, 19, -56, 65, -75, 55, -24, 58, 24, -36, -11, 22, -29, 3, 79, -48, -73, -59, -50, 79, -8, -70, 50, 
  -14, 37, 42, 22, 90, -89, 58, -58, -9, 68, -58, -8, 105, -41, 31, 81, -81, 81, -8, -7, -5, 62, -62, -69, 74, -72, 104, -51, 5, -61, -42, 48, 43, -95, 39, -27, -48, -89, 53, 61, -56, 21, 68, -69, -19, -64, 67, -77, -28, -26, -49, 43, 32, -64, -68, -78, 3, 66, 24, 3, -84, -67, -58, 83, -55, -46, 46, -47, 28, 59, 84, -42, 91, -25, 31, 35, -37, -30, -64, -102, 75, 48, -27, -1, 61, 75, 115, 43, 44, -22, 6, 68, 75, -41, -44, -87, 48, -108, 59, -62, -58, -21, 
  41, 79, 87, -54, 34, -11, -28, 10, -41, 19, -29, 15, -44, 46, 10, -51, 69, -47, 53, -41, -71, -18, 4, 66, 32, -80, -45, -19, -78, 23, 18, -44, 0, -77, -106, -9, 14, 54, 28, 78, 42, -53, -12, -31, 86, 22, -43, 11, 29, 26, -18, 81, 21, -22, 44, 85, 92, 17, 110, 80, -14, -2, 96, -90, 47, 31, 45, -69, -87, 34, 94, 94, 28, 78, -44, 37, -22, -67, -102, -1, 92, -65, 18, 46, -83, 108, 52, 107, -108, -94, 50, -9, -84, 95, 17, 6, -24, 75, 55, 54, 45, 5, 
  -71, 6, 47, 37, -81, -57, -62, 41, 46, 90, -91, -25, 33, -20, 43, 101, 97, 73, 14, -37, 38, 59, 74, 71, -22, 20, -31, 67, -34, 17, -14, 20, 11, 52, -68, -42, -108, -78, 112, 54, 27, 2, 80, 46, -19, 31, 20, 2, 79, 59, 2, 61, -55, -73, -8, 95, -4, -56, -46, -92, -36, 89, 60, -51, 88, 50, -70, -72, 34, 21, 5, -58, 77, -44, -41, 64, 82, -77, -92, -64, 52, -104, 99, 37, -93, 99, 71, 74, -19, 92, 47, 96, 91, -24, -5, -86, 68, 13, 104, -106, -97, -73, 
  97, -49, 44, -15, 53, -64, -67, 13, 59, -32, -22, -71, 5, 8, -21, -25, -21, -43, 73, -48, 8, -50, -19, 81, 47, 4, -31, 51, 34, 4, -27, -40, -80, -31, -17, 41, 45, -64, 36, 15, 16, -8, -50, 69, 17, -27, 84, 9, -67, 74, 1, 15, -72, -100, -13, 35, 65, 46, -96, -34, -17, -16, 31, -45, -40, -76, -17, 65, -83, -3, -62, -100, 67, 23, 32, -17, -26, 24, 42, 92, 76, -4, -52, -77, 49, -5, 0, 46, 6, 85, -79, -17, 87, -73, 0, 65, -71, 80, 72, -7, 93, -20, 
  94, -30, 79, -88, -72, -47, -48, -17, -92, -25, -73, -13, -88, 22, 62, 84, -44, 41, 23, 24, -96, -66, 81, 82, 0, 24, 85, 11, 88, -59, 48, 67, 22, -75, -64, 83, 92, 40, -7, 76, 79, -14, 25, -90, 75, -86, -100, -68, -82, 47, -16, 25, 18, 61, -24, 6, -59, 54, 75, 25, 87, -64, 73, -43, 69, -91, -2, -69, -37, 35, -2, -35, 27, -96, 52, -35, 48, 5, -24, 17, 60, -48, -92, 64, -61, -60, -72, -34, 20, 6, 0, 2, -68, -5, -96, 0, 32, 87, -57, -52, 90, -37, 
  54, -73, 29, -8, -95, 87, -33, -45, -40, -16, -48, -72, 89, 48, -29, 18, 26, 15, 13, 48, -110, 61, 1, 51, 93, -54, -96, -6, 51, 32, 84, 125, 67, 20, -84, -62, 114, 116, 36, 14, -9, -26, 5, 64, -37, 8, -16, 41, -80, -45, 46, -101, 47, -80, 54, 5, -55, -75, -112, 47, 18, -52, -93, -43, 76, -102, 39, -33, -15, -50, -80, -59, 37, 111, -78, 96, -10, 96, 56, -40, -60, -25, 78, 49, -12, -8, 22, -64, 115, 95, 67, 102, -5, -63, 70, -45, -32, -20, -90, 111, 30, 35, 
  31, 55, 10, -40, -12, -33, 9, -37, 105, -84, -57, 83, -62, -60, 73, 23, -70, 85, 86, 75, -29, 51, -73, -16, 83, 103, 113, -101, -36, 22, -26, -63, 98, -63, 38, -49, 28, 6, 79, -68, -89, 26, 59, -31, 21, 29, -82, -20, -60, -62, 26, -54, -33, -60, 109, 13, -71, 19, -19, 101, -11, -77, 12, -15, -85, 72, -86, 108, 79, 35, 103, 61, 45, 22, -11, -49, 37, -24, 113, 97, 28, 42, -91, 11, -67, 96, -56, 106, -53, 22, -68, 99, -36, 0, 44, -46, 49, -54, -19, -5, 3, -63, 
  -93, -63, -37, -23, 67, 75, 76, -58, 61, -18, 11, -100, 30, 64, -79, -24, 1, 30, 7, 2, 9, 91, 67, 53, -100, -36, 6, -64, 87, 93, 14, -77, -44, -41, -47, -14, -59, -31, -81, 52, 93, -81, 46, -36, 66, -29, -4, -50, -16, 97, -34, 65, 36, 108, 43, 55, 26, -28, 66, -89, -22, 43, 47, -28, -85, -44, -77, 76, 19, -38, -36, -74, 8, 91, 63, -35, -39, 50, -68, 67, -40, 57, 48, -47, -21, -76, 31, 72, -12, -39, -24, -27, -29, -66, -94, 55, 48, 44, 62, 91, 19, -21, 
  52, -24, 100, 58, 89, 76, -73, 40, 57, 67, -36, 26, -69, 71, 65, 35, -29, -73, 51, -53, -26, -84, -5, 1, 16, -20, 105, -46, 44, 47, -10, 0, 70, -59, 53, -45, 103, 14, 45, -15, -34, 84, -27, 89, -72, 66, -74, -84, 53, -84, -24, -72, 47, 16, -24, -16, -59, -5, 91, -57, 77, 69, 25, -104, 70, 83, 23, 80, 75, -45, -96, 16, 80, 30, -79, -99, 81, 3, 58, 56, -34, 88, -6, -73, -48, 21, -44, -78, 32, 66, -70, -101, -68, -67, -21, 79, 79, -62, 39, -26, -102, 41, 
  53, -71, -32, -35, 90, -57, 68, -111, -5, -9, -13, -8, -24, 16, -39, -23, 89, -43, -24, 75, 26, 94, -37, -25, 27, -56, -74, 88, 1, 59, -74, -33, 66, 98, -85, -65, -24, 51, 33, 50, -13, 5, 49, -42, -28, 54, 16, 100, 42, -100, 99, -48, 79, -4, -24, 39, -49, 90, 40, -91, -20, -85, 71, -87, -6, -74, 11, -92, 70, -29, -96, 56, -19, 77, 92, -42, 47, -47, 77, 56, 61, 21, 3, 43, 39, -74, -68, 28, 81, -90, -116, -14, 38, 27, -57, -18, 27, 21, 94, -27, 95, -17, 
  18, 72, -28, -10, 82, 92, -47, 25, -53, 92, -32, -33, 78, 18, -43, 105, 51, 52, -64, -91, -5, -23, 1, -13, 88, -58, -24, 67, 83, -49, -4, -11, 60, 64, 74, -81, 27, -70, 17, 98, -62, -19, 42, -50, 90, 56, -20, -18, 50, 74, -13, -107, -50, -14, 88, -76, 2, -68, -88, -53, 10, 9, 29, 9, -28, 0, 60, -51, 9, -62, -73, -71, 0, 55, -20, -29, -88, 2, 58, -15, -48, 45, 51, -85, 29, 14, -100, 61, -53, -77, -29, -47, 50, 76, 1, -59, -98, -70, -104, -101, -24, -55, 
  -91, -56, -29, 58, -28, -15, -17, -26, -38, -55, 47, 38, 10, -23, 13, -1, 61, -96, 12, -40, -76, -87, -11, -97, 11, -2, 50, -43, 2, 83, 65, -33, 10, 84, -94, -10, 5, 23, -8, -3, -94, 52, 62, 49, -55, 97, -77, -1, -22, -58, -48, -31, -68, -64, 89, 38, 27, -42, 19, -73, -23, 20, -77, -87, 76, -32, 17, 30, 39, -46, 8, 30, 10, -8, 24, -103, 27, -58, 29, 42, -50, 89, -92, 37, 50, 94, 31, -105, 39, 16, 11, 14, -54, -61, 7, -93, 16, -55, 20, -88, 38, 20, 
  107, 35, 101, -61, 72, 35, -19, -77, 83, 64, -42, -88, -18, 34, 25, -87, 69, -32, 76, 70, -41, -6, 74, 103, 82, 48, 52, 66, -27, -71, -38, -48, 68, -84, -22, -7, -37, 67, -23, 107, 95, -44, -80, 41, 111, 0, -46, 7, -30, -5, -75, -33, 81, 16, 0, 52, 89, -36, 94, -59, 107, 89, 6, -6, -54, -1, 6, -33, -2, -42, -13, 35, 39, 4, -69, -16, -43, -88, -14, -56, 54, 58, -84, -85, -17, 51, -77, 47, -4, 43, -17, 67, -78, -9, 61, -65, 67, 60, 82, 72, -29, 24, 
  97, 10, 2, -36, 37, -68, -79, 39, 54, -6, -81, 91, 52, 1, 102, -14, 77, 40, -20, 27, 108, -84, 42, 80, 38, 68, 35, 0, -16, -52, -23, 84, -32, 21, 90, -92, -5, -106, 26, 83, 93, -114, 60, -79, -23, 70, 50, -71, 79, 61, 65, -19, 11, 18, 8, -58, -83, -64, 21, 65, -88, 87, 1, 37, -75, 50, 75, -99, -12, 94, 53, -57, -15, 48, 15, 4, -59, -53, -2, 0, 100, -83, -73, 59, -89, 74, -101, -14, 106, -85, -58, 55, 84, -13, 68, 10, 25, 13, -14, 105, 53, -40, 
  -4, -90, -43, 61, -4, 45, -41, -31, -21, 71, -33, -79, -21, 95, 47, 9, 28, -89, 10, 13, 61, 77, 106, 91, -79, 60, 93, -64, -13, -80, -29, 66, -23, -36, 46, 68, -93, 62, -21, -88, -85, -102, -11, -101, -57, -71, 74, -57, -82, 45, 111, -47, -42, 47, -56, 74, 22, 54, -78, 40, 36, 97, -64, -38, -76, 38, 86, 59, 43, -29, -103, 21, 46, -12, 37, 64, -41, -80, -10, -21, 6, -90, -29, -57, -41, 71, 77, -50, -53, -71, 1, -59, 1, -45, -40, 3, 79, -89, 16, 62, -7, 83, 
  -19, 74, 51, -61, -26, -56, -9, 56, -10, -17, -96, 106, -87, -36, -6, 38, 3, 67, -13, 50, -99, -41, 76, 45, 8, -98, -42, -66, 41, 23, -26, -93, 44, 99, 63, -63, -84, -71, -52, -49, 54, -99, -52, 13, 27, 95, -51, 85, 99, 9, -43, 89, 44, -39, 50, 83, 102, 42, 75, 78, -28, -72, -27, -48, -78, -91, -30, 2, -9, 85, -46, 79, -72, 45, 12, -82, -9, 80, 58, 31, 85, 39, -52, 36, 66, -36, 69, -72, 8, 33, -69, -37, -25, 61, -25, -50, -11, -50, 75, 65, -37, 12, 
  63, 27, -8, -65, 102, 102, -20, 11, -99, -9, 49, -78, 92, 84, -114, -72, 38, 22, -50, -37, -58, 28, -1, 81, -106, 59, -49, -3, -100, -34, -76, -89, 62, 80, -59, -57, -40, 51, 5, 98, 96, 11, 103, 68, 41, 21, -78, 72, 107, 74, 11, 57, -46, 1, 72, -110, 86, -103, 96, 47, 4, 45, 81, -23, 78, 82, 56, -45, -29, -13, 4, -84, -69, 92, 48, -91, -56, -86, 65, 91, -16, -13, -79, -73, 19, -17, -94, -66, -45, -100, 86, -115, -9, -12, -18, 23, -59, -48, -3, -3, 20, 58, 
};
const TfArray<2, int> tensor_dimension1 = { 2, { 40,102 } };
const TfArray<1, float> quant1_scale = { 1, { 0.0020072611514478922, } };
const TfArray<1, int> quant1_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant1 = { (TfLiteFloatArray*)&quant1_scale, (TfLiteIntArray*)&quant1_zero, 0 };
const ALIGN(16) int32_t tensor_data2[40] = { -58, 29, -90, -30, -54, -28, 14, -53, -21, -52, -116, 48, 64, -28, -51, -69, 178, 89, -96, -32, -73, -42, -72, 61, -2, 97, -26, -105, 164, 113, 25, -102, -45, -106, -15, -82, -71, -76, -88, -62, };
const TfArray<1, int> tensor_dimension2 = { 1, { 40 } };
const TfArray<1, float> quant2_scale = { 1, { 0.00029712961986660957, } };
const TfArray<1, int> quant2_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant2 = { (TfLiteFloatArray*)&quant2_scale, (TfLiteIntArray*)&quant2_zero, 0 };
const ALIGN(16) int8_t tensor_data3[20*40] = { 
  -65, 37, 94, -11, -100, -38, 86, -33, -97, -38, 83, -103, -55, 87, -77, -61, 22, 100, 94, 80, -42, -96, -53, 45, -64, -109, 77, -23, 2, 60, 76, -90, -83, -110, -41, 37, 62, -32, 1, -30, 
  -70, -50, 17, 82, -32, 17, -25, -76, -41, 57, 44, -4, -13, -49, -2, -64, 51, -6, 60, -39, -116, 46, 106, 2, 1, 94, 6, 41, -8, 25, 113, -56, -48, 103, -33, -82, -72, 116, 56, 32, 
  -90, 18, 70, 40, 63, -76, 15, 21, -36, -106, 99, -20, 55, -69, -5, 59, -4, -70, 96, -12, 50, -6, 68, 12, -15, -75, 13, 86, -32, -25, -71, 12, 37, -2, 55, 69, 37, 12, 91, 50, 
  -77, -73, 17, 55, 92, 79, 14, -29, 14, 20, -63, 76, -18, -73, 25, 47, -27, 27, 79, 36, -88, -74, 52, -64, -13, -47, -70, 36, 33, 30, 5, 27, -48, -101, -29, -55, -12, 3, 18, -77, 
  11, -66, -102, -58, -76, 0, -103, -26, 10, 96, 58, 50, 96, 6, 33, 68, -42, -76, -2, 90, 58, -75, 38, -33, -98, 41, 54, 102, -65, 75, 26, -86, -25, 80, -114, 81, -23, 42, 57, -4, 
  66, -79, -69, 24, 94, -110, -88, -55, -83, -95, 71, -14, -65, -90, -103, 90, 49, -13, 74, 102, 63, 45, -2, 40, -3, -81, -54, 126, -25, -29, 91, -58, -62, -28, 24, -21, 16, -112, 11, -1, 
  84, 9, 85, 26, 36, -62, -119, -16, 39, 35, 87, -77, -110, 7, 90, -93, 59, -29, 0, 67, 24, 71, -64, 94, 16, 29, -96, -62, 74, -3, -79, 23, -77, 97, -84, -5, 39, -23, -7, 47, 
  -53, -57, -30, -31, 118, 83, 3, -3, -67, -53, 95, 85, -107, 59, -84, 23, 67, -81, -46, 9, 14, -63, -106, -26, 8, 22, 3, 108, 22, -19, 64, 20, 64, -64, 31, 13, -15, 47, 51, -86, 
  -68, 12, 123, 59, -19, 49, 95, -12, -92, -3, -93, 27, 61, 29, 97, 97, -27, 80, 18, -35, -85, 17, 7, -20, 20, 7, 2, 6, -9, 26, -76, -19, -43, -3, 52, -92, -20, -98, 6, -45, 
  -33, 24, -68, 78, 77, -26, -89, -86, 97, -35, 43, -78, -64, -47, 38, -2, 7, 46, 26, -82, 53, 72, 61, -71, -45, 47, 54, 3, 31, -27, -72, -83, -35, -107, -12, -60, 47, 98, 99, -113, 
  -3, 16, -63, 16, -101, -63, 84, -1, 8, 12, -51, -3, -96, -53, -46, -38, -50, 48, 4, 25, 87, 90, 47, 21, -72, 2, -31, -77, 19, -58, -47, -97, -114, 127, 89, -34, -96, 60, 11, 4, 
  9, 29, 17, -63, -75, -77, -30, -101, 74, -93, 81, 83, 117, 89, 58, 12, 115, 46, -52, 35, 43, 20, 82, 100, 11, -25, 111, 107, 45, -25, 19, -12, 64, -54, 32, 99, 53, 93, -118, 79, 
  72, -41, -16, -27, 97, -45, -102, -21, 126, -14, -66, 60, 61, -84, 90, -100, -24, 63, 96, -42, 61, 80, -61, -108, -30, 22, -47, 9, -114, -59, -68, 74, 105, -108, 73, -80, -61, 56, 17, -17, 
  -15, -80, 41, 89, -80, 35, -71, 111, 23, -75, 96, 87, -87, 83, 49, 13, -24, -82, 70, -81, -34, 73, -101, 2, 92, -67, -28, 7, -111, -26, -38, -6, 98, 97, 28, 60, -18, 95, -65, 2, 
  -2, -92, 72, -31, 106, -99, 44, 19, -115, 21, 99, 114, -63, -87, -18, -100, 1, 32, -34, 47, -1, 102, -107, -47, 53, 62, -15, -58, -49, -58, 88, -5, 48, 71, -26, 35, -109, 77, -9, -69, 
  83, -2, -12, -42, -122, 84, 31, 68, 2, 76, 48, 38, 20, -92, -64, 75, -15, 86, 65, -47, 46, 102, 80, 99, 21, 22, 86, 104, -34, 24, -4, -68, 31, -17, 92, 6, 101, 13, 56, -127, 
  -37, 78, -45, 30, 94, 70, -6, -8, -25, -45, 31, 78, 63, -84, 51, -56, 109, -76, 38, -95, -54, -11, 59, 96, 86, -76, -48, 62, -44, 74, -46, 47, 48, -28, 64, 9, 36, -16, 1, -75, 
  92, -108, -5, -92, 54, 90, -20, -50, 6, 38, 43, -105, 51, 1, 82, 54, -44, -77, 21, 64, -24, 17, 84, -21, 28, -30, 46, 44, 41, -30, 43, 35, -37, -7, 0, -48, 78, 56, -8, 28, 
  55, 41, -14, -120, -81, 85, 116, 54, 93, -7, 39, -13, -34, 78, -17, -73, 14, -19, -25, -79, 90, -94, -77, -61, -77, 99, -122, 41, 28, -5, -115, 71, -22, -22, -91, -66, -95, -91, -28, 30, 
  29, 74, 50, -81, -38, 32, -34, 20, 91, 93, -11, 100, -4, -89, -107, -91, 88, -56, 32, -12, -32, 43, 10, -49, 102, -52, -61, -49, -45, -56, 23, 101, -33, -66, -69, -22, -8, -100, -116, -29, 
};
const TfArray<2, int> tensor_dimension3 = { 2, { 20,40 } };
const TfArray<1, float> quant3_scale = { 1, { 0.0028362004086375237, } };
const TfArray<1, int> quant3_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant3 = { (TfLiteFloatArray*)&quant3_scale, (TfLiteIntArray*)&quant3_zero, 0 };
const ALIGN(16) int32_t tensor_data4[20] = { -45, -25, -303, -102, -130, -11, -84, 326, 13, -132, 20, -5, 250, -98, -54, -173, 46, -206, -193, -137, };
const TfArray<1, int> tensor_dimension4 = { 1, { 20 } };
const TfArray<1, float> quant4_scale = { 1, { 0.00015828887990210205, } };
const TfArray<1, int> quant4_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant4 = { (TfLiteFloatArray*)&quant4_scale, (TfLiteIntArray*)&quant4_zero, 0 };
const ALIGN(16) int8_t tensor_data5[4*20] = { 
  -29, -19, 15, 65, -1, -27, -83, 22, 18, 16, 39, -31, -81, 99, 102, 5, 64, -65, 25, 94, 
  65, -20, 86, 48, 20, 41, 75, -67, 71, 89, -93, -44, -89, 104, -77, 32, -87, 83, -23, -25, 
  -121, -96, -74, 57, 40, 36, 27, -13, 25, -82, 105, 36, -109, -79, 68, 96, 86, -97, -108, 61, 
  -111, 104, 62, -1, 6, -28, -17, -113, -127, 119, -78, -69, 57, -4, -12, 44, -52, 8, -4, -94, 
};
const TfArray<2, int> tensor_dimension5 = { 2, { 4,20 } };
const TfArray<1, float> quant5_scale = { 1, { 0.0043756142258644104, } };
const TfArray<1, int> quant5_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant5 = { (TfLiteFloatArray*)&quant5_scale, (TfLiteIntArray*)&quant5_zero, 0 };
const ALIGN(16) int32_t tensor_data6[4] = { 117, -168, 61, 140, };
const TfArray<1, int> tensor_dimension6 = { 1, { 4 } };
const TfArray<1, float> quant6_scale = { 1, { 0.00023875158512964845, } };
const TfArray<1, int> quant6_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant6 = { (TfLiteFloatArray*)&quant6_scale, (TfLiteIntArray*)&quant6_zero, 0 };
const TfArray<2, int> tensor_dimension7 = { 2, { 1,40 } };
const TfArray<1, float> quant7_scale = { 1, { 0.055810187011957169, } };
const TfArray<1, int> quant7_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant7 = { (TfLiteFloatArray*)&quant7_scale, (TfLiteIntArray*)&quant7_zero, 0 };
const TfArray<2, int> tensor_dimension8 = { 2, { 1,20 } };
const TfArray<1, float> quant8_scale = { 1, { 0.054564129561185837, } };
const TfArray<1, int> quant8_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant8 = { (TfLiteFloatArray*)&quant8_scale, (TfLiteIntArray*)&quant8_zero, 0 };
const TfArray<2, int> tensor_dimension9 = { 2, { 1,4 } };
const TfArray<1, float> quant9_scale = { 1, { 0.058632306754589081, } };
const TfArray<1, int> quant9_zero = { 1, { -25 } };
const TfLiteAffineQuantization quant9 = { (TfLiteFloatArray*)&quant9_scale, (TfLiteIntArray*)&quant9_zero, 0 };
const TfArray<2, int> tensor_dimension10 = { 2, { 1,4 } };
const TfArray<1, float> quant10_scale = { 1, { 0.00390625, } };
const TfArray<1, int> quant10_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant10 = { (TfLiteFloatArray*)&quant10_scale, (TfLiteIntArray*)&quant10_zero, 0 };
const TfLiteFullyConnectedParams opdata0 = { kTfLiteActRelu, kTfLiteFullyConnectedWeightsFormatDefault, false, false };
const TfArray<3, int> inputs0 = { 3, { 0,1,2 } };
const TfArray<1, int> outputs0 = { 1, { 7 } };
const TfLiteFullyConnectedParams opdata1 = { kTfLiteActRelu, kTfLiteFullyConnectedWeightsFormatDefault, false, false };
const TfArray<3, int> inputs1 = { 3, { 7,3,4 } };
const TfArray<1, int> outputs1 = { 1, { 8 } };
const TfLiteFullyConnectedParams opdata2 = { kTfLiteActNone, kTfLiteFullyConnectedWeightsFormatDefault, false, false };
const TfArray<3, int> inputs2 = { 3, { 8,5,6 } };
const TfArray<1, int> outputs2 = { 1, { 9 } };
const TfLiteSoftmaxParams opdata3 = { 1 };
const TfArray<1, int> inputs3 = { 1, { 9 } };
const TfArray<1, int> outputs3 = { 1, { 10 } };
const TensorInfo_t tensorData[] = {
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension0, 102, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant0))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data1, (TfLiteIntArray*)&tensor_dimension1, 4080, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant1))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data2, (TfLiteIntArray*)&tensor_dimension2, 160, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant2))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data3, (TfLiteIntArray*)&tensor_dimension3, 800, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant3))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data4, (TfLiteIntArray*)&tensor_dimension4, 80, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant4))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data5, (TfLiteIntArray*)&tensor_dimension5, 80, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant5))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data6, (TfLiteIntArray*)&tensor_dimension6, 16, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant6))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 112, (TfLiteIntArray*)&tensor_dimension7, 40, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant7))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension8, 20, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant8))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 32, (TfLiteIntArray*)&tensor_dimension9, 4, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant9))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension10, 4, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant10))}, },
};const NodeInfo_t nodeData[] = {
  { (TfLiteIntArray*)&inputs0, (TfLiteIntArray*)&outputs0, const_cast<void*>(static_cast<const void*>(&opdata0)), OP_FULLY_CONNECTED, },
  { (TfLiteIntArray*)&inputs1, (TfLiteIntArray*)&outputs1, const_cast<void*>(static_cast<const void*>(&opdata1)), OP_FULLY_CONNECTED, },
  { (TfLiteIntArray*)&inputs2, (TfLiteIntArray*)&outputs2, const_cast<void*>(static_cast<const void*>(&opdata2)), OP_FULLY_CONNECTED, },
  { (TfLiteIntArray*)&inputs3, (TfLiteIntArray*)&outputs3, const_cast<void*>(static_cast<const void*>(&opdata3)), OP_SOFTMAX, },
};
static void* overflow_buffers[EI_MAX_OVERFLOW_BUFFER_COUNT];
static size_t overflow_buffers_ix = 0;
static void * AllocatePersistentBuffer(struct TfLiteContext* ctx,
                                       size_t bytes) {
  void *ptr;
  if (current_location - bytes < tensor_boundary) {
    if (overflow_buffers_ix > EI_MAX_OVERFLOW_BUFFER_COUNT - 1) {
      ei_printf("ERR: Failed to allocate persistent buffer of size %d, does not fit in tensor arena and reached EI_MAX_OVERFLOW_BUFFER_COUNT\n",
        (int)bytes);
      return NULL;
    }

    // OK, this will look super weird, but.... we have CMSIS-NN buffers which
    // we cannot calculate beforehand easily.
    ptr = ei_calloc(bytes, 1);
    if (ptr == NULL) {
      ei_printf("ERR: Failed to allocate persistent buffer of size %d\n", (int)bytes);
      return NULL;
    }
    overflow_buffers[overflow_buffers_ix++] = ptr;
    return ptr;
  }

  current_location -= bytes;

  ptr = current_location;
  memset(ptr, 0, bytes);

  return ptr;
}
typedef struct {
  size_t bytes;
  void *ptr;
} scratch_buffer_t;
static scratch_buffer_t scratch_buffers[EI_MAX_SCRATCH_BUFFER_COUNT];
static size_t scratch_buffers_ix = 0;

static TfLiteStatus RequestScratchBufferInArena(struct TfLiteContext* ctx, size_t bytes,
                                                int* buffer_idx) {
  if (scratch_buffers_ix > EI_MAX_SCRATCH_BUFFER_COUNT - 1) {
    ei_printf("ERR: Failed to allocate scratch buffer of size %d, reached EI_MAX_SCRATCH_BUFFER_COUNT\n",
      (int)bytes);
    return kTfLiteError;
  }

  scratch_buffer_t b;
  b.bytes = bytes;

  b.ptr = AllocatePersistentBuffer(ctx, b.bytes);
  if (!b.ptr) {
    ei_printf("ERR: Failed to allocate scratch buffer of size %d\n",
      (int)bytes);
    return kTfLiteError;
  }

  scratch_buffers[scratch_buffers_ix] = b;
  *buffer_idx = scratch_buffers_ix;

  scratch_buffers_ix++;

  return kTfLiteOk;
}

static void* GetScratchBuffer(struct TfLiteContext* ctx, int buffer_idx) {
  if (buffer_idx > (int)scratch_buffers_ix) {
    return NULL;
  }
  return scratch_buffers[buffer_idx].ptr;
}

static TfLiteTensor* GetTensor(const struct TfLiteContext* context,
                               int tensor_idx) {
  return &tflTensors[tensor_idx];
}

static TfLiteEvalTensor* GetEvalTensor(const struct TfLiteContext* context,
                                       int tensor_idx) {
  return &tflEvalTensors[tensor_idx];
}

} // namespace

TfLiteStatus trained_model_init( void*(*alloc_fnc)(size_t,size_t) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  tensor_arena = (uint8_t*) alloc_fnc(16, kTensorArenaSize);
  if (!tensor_arena) {
    ei_printf("ERR: failed to allocate tensor arena\n");
    return kTfLiteError;
  }
#else
  memset(tensor_arena, 0, kTensorArenaSize);
#endif
  tensor_boundary = tensor_arena;
  current_location = tensor_arena + kTensorArenaSize;
  ctx.AllocatePersistentBuffer = &AllocatePersistentBuffer;
  ctx.RequestScratchBufferInArena = &RequestScratchBufferInArena;
  ctx.GetScratchBuffer = &GetScratchBuffer;
  ctx.GetTensor = &GetTensor;
  ctx.GetEvalTensor = &GetEvalTensor;
  ctx.tensors = tflTensors;
  ctx.tensors_size = 11;
  for (size_t i = 0; i < 11; ++i) {
    tflTensors[i].type = tensorData[i].type;
    tflEvalTensors[i].type = tensorData[i].type;
    tflTensors[i].is_variable = 0;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
    tflTensors[i].allocation_type = tensorData[i].allocation_type;
#else
    tflTensors[i].allocation_type = (tensor_arena <= tensorData[i].data && tensorData[i].data < tensor_arena + kTensorArenaSize) ? kTfLiteArenaRw : kTfLiteMmapRo;
#endif
    tflTensors[i].bytes = tensorData[i].bytes;
    tflTensors[i].dims = tensorData[i].dims;
    tflEvalTensors[i].dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
    if(tflTensors[i].allocation_type == kTfLiteArenaRw){
      uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

     tflTensors[i].data.data =  start;
     tflEvalTensors[i].data.data =  start;
    }
    else {
       tflTensors[i].data.data = tensorData[i].data;
       tflEvalTensors[i].data.data = tensorData[i].data;
    }
#else
    tflTensors[i].data.data = tensorData[i].data;
    tflEvalTensors[i].data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
    tflTensors[i].quantization = tensorData[i].quantization;
    if (tflTensors[i].quantization.type == kTfLiteAffineQuantization) {
      TfLiteAffineQuantization const* quant = ((TfLiteAffineQuantization const*)(tensorData[i].quantization.params));
      tflTensors[i].params.scale = quant->scale->data[0];
      tflTensors[i].params.zero_point = quant->zero_point->data[0];
    }
    if (tflTensors[i].allocation_type == kTfLiteArenaRw) {
      auto data_end_ptr = (uint8_t*)tflTensors[i].data.data + tensorData[i].bytes;
      if (data_end_ptr > tensor_boundary) {
        tensor_boundary = data_end_ptr;
      }
    }
  }
  if (tensor_boundary > current_location /* end of arena size */) {
    ei_printf("ERR: tensor arena is too small, does not fit model - even without scratch buffers\n");
    return kTfLiteError;
  }
  registrations[OP_FULLY_CONNECTED] = Register_FULLY_CONNECTED();
  registrations[OP_SOFTMAX] = Register_SOFTMAX();

  for (size_t i = 0; i < 4; ++i) {
    tflNodes[i].inputs = nodeData[i].inputs;
    tflNodes[i].outputs = nodeData[i].outputs;
    tflNodes[i].builtin_data = nodeData[i].builtin_data;
tflNodes[i].custom_initial_data = nullptr;
      tflNodes[i].custom_initial_data_size = 0;
if (registrations[nodeData[i].used_op_index].init) {
      tflNodes[i].user_data = registrations[nodeData[i].used_op_index].init(&ctx, (const char*)tflNodes[i].builtin_data, 0);
    }
  }
  for (size_t i = 0; i < 4; ++i) {
    if (registrations[nodeData[i].used_op_index].prepare) {
      TfLiteStatus status = registrations[nodeData[i].used_op_index].prepare(&ctx, &tflNodes[i]);
      if (status != kTfLiteOk) {
        return status;
      }
    }
  }
  return kTfLiteOk;
}

static const int inTensorIndices[] = {
  0, 
};
TfLiteTensor* trained_model_input(int index) {
  return &ctx.tensors[inTensorIndices[index]];
}

static const int outTensorIndices[] = {
  10, 
};
TfLiteTensor* trained_model_output(int index) {
  return &ctx.tensors[outTensorIndices[index]];
}

TfLiteStatus trained_model_invoke() {
  for (size_t i = 0; i < 4; ++i) {
    TfLiteStatus status = registrations[nodeData[i].used_op_index].invoke(&ctx, &tflNodes[i]);

#if EI_CLASSIFIER_PRINT_STATE
    ei_printf("layer %lu\n", i);
    ei_printf("    inputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].inputs->size; ix++) {
      auto d = tensorData[tflNodes[i].inputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");

    ei_printf("    outputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].outputs->size; ix++) {
      auto d = tensorData[tflNodes[i].outputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");
#endif // EI_CLASSIFIER_PRINT_STATE

    if (status != kTfLiteOk) {
      return status;
    }
  }
  return kTfLiteOk;
}

TfLiteStatus trained_model_reset( void (*free_fnc)(void* ptr) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  free_fnc(tensor_arena);
#endif

  // scratch buffers are allocated within the arena, so just reset the counter so memory can be reused
  scratch_buffers_ix = 0;

  // overflow buffers are on the heap, so free them first
  for (size_t ix = 0; ix < overflow_buffers_ix; ix++) {
    ei_free(overflow_buffers[ix]);
  }
  overflow_buffers_ix = 0;
  return kTfLiteOk;
}
